var ClientModel = Backbone.Model.extend({
    urlRoot: '../php/clientsJS.php/hello/',
    defaults: {
        firstname: 'firstname',
        lastname: 'lastname',
        address: {street: '', city: '', postalcode: ''},
        username: '',
        password: '',
        birthdate: ''
    },
    /*
    url: function() {
        return 'clientsJS.php/hello/' + this.id;
    },
    */
    initialize: function (options) {
        //this.id = options.id;
        //console.log('model created');
    },
    validate: function(attrs, options) {
        //console.log('in validate');
        //console.log(attrs);
        if (!attrs.dob || !attrs.lastname || !attrs.firstname) {
            return "Firstname, Lastname and DoB are all required fields";
        }
        if (!moment(attrs.dob, 'YYYY-MM-DD', true).isValid()) {
            //console.log('not a valid date ' + attrs.dob);
            return "Birthdate is not a date";
        }
    },
    /*
    sync: function() {
        //console.log('client model sync called');
    }
    */
    
});

var ClientServiceModel = Backbone.Model.extend({
    
    // this model is a single service
    urlRoot: '../php/servicesJS.php/',
    defaults: {
        
    }
});

var ClientServicesCollection = Backbone.Collection.extend({
    
    // this collection is all services for a single client
    model:ClientServiceModel,
    url: '../php/servicesJS.php/remaining/',
    initialize: function(options) {
        
        console.log('init ClientServicesCollection');
        console.log(options);
        
    }
});

var ClientServiceView = Backbone.View.extend({
    tagName: 'tr',
    
    id: 'client-service',

    class: 'service-details',
    
    model: ClientServiceModel,
    
    template: _.template($('#client-service-template').html()),
    
    events: {
        "keypress": "updateOnEnter",
        'click #editservicedetails': 'edit'
    },
    
    render: function() {
        console.log(this.model);
        
        this.$el.html(this.template(this.model.toJSON()));
        //console.log(this.model.toJSON());
        return this;
    },
    
    updateOnEnter: function(e) {
        //console.log('key pressed ' + e.which);
        if (e.which === 13) {
            //console.log(this.isValid());
            if (this.isValid()) {
                this.save();   
            }
        }
    },
    
    edit: function() {
        console.log('clicked edit');
        this.$el.addClass('editing');
    }
    
});

var ClientServicesListView = Backbone.View.extend({
    tagName: 'tr',
    
    id: 'client-services-list',
    
    class: 'service-details',

    template: _.template($('#client-services-list-template').html()),
    
    initialize: function() {
        
        var self = this;
        
        this.$el.html(this.template());

        console.log("getting client details...");
                
        // fetch this client's services
        var clientServicesCollection = new ClientServicesCollection({ id: this.model.id });
        clientServicesCollection.fetch({
            reset: true,
            data: { 
                id: this.model.id
            },
            success: function() {
                
                console.log('fetched successfully');
                console.log(self);

                // print the headings
                //$('#client-services-list').html('');
                //$('#client-services-list').html("<li id='client-service'><ul><li class='service-details-header' style='width:50px'>&nbsp;</li><li class='service-details-header' style='width:150px'>provider</li><li class='service-details-header' style='width:250px'>service: appointments left</li><li class='service-details-header' style='width:150px'>active on</li><li class='service-details-header' style='width:100px'>MVA</li></ul></li>");
                
                if (clientServicesCollection.length === 0) {
                    $('#client-services-list').html('no services');
                } else {
                    clientServicesCollection.each(self.addService, self);
                }
            }
        });
        
    },
    
    addService: function(clientServiceModel) {
        
        var clientServiceView = new ClientServiceView({model: clientServiceModel, parent:this});
        $('#clients-table').append(clientServiceView.render().el);

        console.log(clientServiceModel);
        
    },
        
    events: {
        "keypress": "updateOnEnter"
    },
    
    render: function() {
        return this;
    },
    
    updateOnEnter: function(e) {
        //console.log('key pressed ' + e.which);
        if (e.which === 13) {
            //console.log(this.isValid());
            if (this.isValid()) {
                this.save();   
            }
        }
    }
    
});


var ClientsCollection = Backbone.Collection.extend({
    model: ClientModel,
    url: '../php/clientsJS.php/hello/',
    initialize: function() {
        //console.log('CC created!');
    },
    sync: function(method, collection, options) {
        //console.log('client collection sync called with ' + method);
        //console.log('client collection sync called on collection ' + JSON.stringify(collection.toJSON()));
        //console.log('client collection sync called with options ' + options);
        return Backbone.sync(method, collection, options);
    }
});

var DetailedClientView = Backbone.View.extend({
    tagName: 'div',
    
    id: 'client-details-table',
   
    model: ClientModel,
    
    template: _.template($('#detailed-client-template').html()),
    
    events: {
        "keypress": "updateOnEnter",
    },
    
    render: function() {
        this.$el.html(this.template(this.model.toJSON()));
        //console.log(this.model.toJSON());
        return this;
    },
    
    updateOnEnter: function(e) {
        //console.log('key pressed ' + e.which);
        if (e.which === 13) {
            //console.log(this.isValid());
            if (this.isValid()) {
                this.save();   
            }
        }
    }
    
});

var ClientView = Backbone.View.extend({
    tagName: 'tr',
    
    template: _.template($('#clients-template').html()),
    
    initialize: function(options) {
        this.listenTo(this.model, 'change', this.render);
        this.listenTo(this.model, 'destroy', this.remove);
                
        if (options) {
            this.listenTo(options.parent, 'close:all', this.quit);
        }
        
    },
    render: function () {
        
        //console.log('render client view');
        this.$el.html(this.template(this.model.toJSON()));
                
        //console.log(this.model.toJSON());
        //this.input = this.$('.edit');
        this.input_firstname = this.$('#firstname');
        this.input_lastname = this.$('#lastname');
        this.input_dob = this.$('#dob');
        
        return this;
    },
    events: {
        // put the events in here
        'dblclick label': 'edit',
        'click label': 'details',
        'keypress .edit': 'updateOnEnter',
        'blur .edit': 'close',
        'click .destroy': 'destroy',
        'click .edit_link': 'edit'
    },
    edit: function () {
        this.$el.addClass('editing');
        //this.$el.input.focus();
    },
    details: function() {
        
        /*
        detailedClientView = new DetailedClientView({el: "#clientdetails", model: this.model});
        detailedClientView.render();
        */
        
        // TODO: fix the model being passed in to reflect a ClientServiceModel
        /*
        console.log("getting client details...");
        
        clientServicesCollection = new ClientServicesCollection({ id: this.model.id });
        clientServicesCollection.fetch({
            reset: true,
            data: { 
                id: this.model.id
            }            
        });
        */
        
        // unhighlight the row that was selected before
        console.log(selected_client_row);
        if (selected_client_row)
            selected_client_row.removeClass('client-selected');
        
        // highlight the row that's been selected now (clicked)
        this.$el.addClass('client-selected');
        
        selected_client_row = this.$el;
        clientServicesListView = new ClientServicesListView({el: "#clientserviceslist", model: this.model});
        clientServicesListView.render();
        $('#service_details').show();
        
    },
    close: function () {
        firstname_val = this.input_firstname.val().trim();
        lastname_val = this.input_lastname.val().trim();
        dob_val = this.input_dob.val().trim();
        //console.log('updating ' + firstname_val);
        //console.log('updating ' + lastname_val);
        //console.log('updating ' + dob_val);

        // check that all values have been provided
        if (firstname_val.length && lastname_val.length && dob_val.length) {
            this.model.set({firstname: firstname_val, lastname: lastname_val, dob: dob_val});
            if (this.model.isValid()) {
                this.model.save();
                this.$el.removeClass('editing');
            } else {
                errorsdialog.show(this.model.validationError);
            }
        }
    },
    cancelChange: function() {
        //console.log('canceling request for change');
        this.render();
        this.$el.removeClass('editing');
    },
    updateOnEnter: function(e) {
        if (e.which === 13) {
            this.close();
        } else if (e.which === 0) {
            this.cancelChange();
        }
    },
    destroy: function() {
        //console.log(this.model);
        if (confirm('are you sure you want to delete ' + this.model.get('firstname'))) {
            this.model.destroy();
        }
    },
    quit: function() {
        //console.log('quitting clientview');
        this.unbind();
        this.model.unbind('change', this.render);
        this.model.unbind('destroy', this.remove);
        this.remove();
    }
});

var ClientsAppView = Backbone.View.extend({
    el: '#appspace',
    template: _.template($('#clientsapp-template').html()),
    initialize: function() {
        clientsCollection = new ClientsCollection();
        clientsCollection.fetch();

        this.$el.html(this.template());
        this.listenTo(clientsCollection, 'add', this.addClient);
        this.listenTo(clientsCollection, 'reset', this.addAll);
    },
    render: function() {
        //console.log('clientsappview render() called');
        return this;
    },
    events: {
        'click #newclient': 'addClicked',
    },
    addClient: function(clientModel){
        //console.log('in addClient() .. clientModel says ' + JSON.stringify(clientModel.toJSON()));
        var view = new ClientView({model: clientModel, parent: this});
        $('#clients-table').append(view.render().el);
        
        var clientServicesListView = new ClientServicesListView({model: clientModel, parent:this});
        $('#clients-table').append(clientServicesListView.render().el);

    },
    addAll: function(){
        //console.log('in addall()');
        
        this.$('#clients-table').html($('#clients-header').html()); // clean the clients table
        clientsCollection.each(this.addClient, this);
        
    },
    addClicked: function() {

        //console.log('addClicked ' + this.cid);
        
        this.input_firstname = this.$('#new_firstname');
        this.input_lastname = this.$('#new_lastname');
        this.input_dob = this.$('#new_dob');

        if (!this.input_firstname.val().trim() || !this.input_lastname.val().trim() || !this.input_dob.val().trim()) {
            return;
        }
        
        // store values in global variables
        firstname_val = this.input_firstname.val().trim();
        lastname_val = this.input_lastname.val().trim();
        dob_val = this.input_dob.val().trim();

        var client = new ClientModel();
        client.set('firstname', firstname_val);
        client.set('lastname', lastname_val);
        client.set('dob', dob_val);
        
        if (client.isValid()) {
            client.save();

            // create a model inside clientsCollection
            clientsCollection.add(client, {wait: true});
            
            this.input_firstname.val(''); // clean input box
            this.input_lastname.val(''); // clean input box
            this.input_dob.val(''); // clean input box
        } else {
            errorsdialog.show(client.validationError);   
        }
        //clientsCollection.create(this.newValues(), {wait: true});
        
        //clientsCollection.reset();
        
    },
    newValues: function() {
        return {
            firstname: this.input_firstname.val().trim(),
            lastname: this.input_lastname.val().trim(),
            dob: this.input_dob.val().trim()
        }
    },
    closeAll: function() {
        $('#service_details').hide();
        this.trigger('close:all');
        clientsCollection.unbind('add', this.addClient);
        clientsCollection.unbind('reset', this.addAll);
        this.remove();
    }
});

var selected_client_row;

//clientsCollection = new ClientsCollection();
//var clientModel = new ClientModel();
//clientModel.fetch();
//clientsCollection.fetch();

//var detailedClientView = new DetailedClientView();

//var appointmentModel = new AppointmentModel();
//appointmentsCollection = new AppointmentsCollection([], {date_from: $('#date_from').val(), date_to: $('#date_to').val()});
//appointmentsCollection.fetch({reset: true});

//console.log($('#date_from').val() + " " + $('#date_to').val());
//console.log("appointmentsCollection.length: " + appointmentsCollection.length);


//var clientListView = new ClientListView();
